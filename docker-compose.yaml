version: '3.8'
services:
  influxdb:
    image: influxdb:2.7
    ports:
      - "8086:8086"  # <-- this line is missing
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_backup:/backups
    environment:
      - INFLUXDB_BUCKET=sentry
      - INFLUXDB_RETENTION_POLICY=10y

  local_news_collector:
    build: ./local_news_collector
    ports:
      - "8001:8001"
    depends_on:
      - influxdb
    environment:
      - INFLUX_URL=http://influxdb:8086
      - INFLUX_TOKEN=${INFLUX_TOKEN}
      - INFLUX_ORG=${INFLUX_ORG}
      - INFLUX_BUCKET=Sentry
    command: python collector.py

  binance_collector:
    build: ./binance_collector
    ports:
      - "8002:8002"
    depends_on:
      - influxdb
    environment:
      - INFLUX_URL=http://influxdb:8086
      - MODE=${MODE}
      - INFLUX_TOKEN=${INFLUX_TOKEN}
      - INFLUX_ORG=${INFLUX_ORG}

  neo4j:
    image: neo4j:5.7
    ports:
      - "7474:7474"
      - "7687:7687"  # <-- this line is missing
    volumes:
      - neo4j_data:/data
      - neo4j_import:/import
    environment:
      - NEO4J_AUTH=neo4j/sentry123

  sentimental_anlyzer:
    build:
      context: ./sentimental_anlyzer
    depends_on:
      - influxdb
      - neo4j
    ports:
      - "8004:8004"
    
  orchestrator:
    build:
      context: ./orchestrator
    command: python main_orchestrator.py
    depends_on:
      - local_news_collector
      - binance_collector
      - neo4j_sync
    environment:
      - INFLUX_URL=http://influxdb:8086
      - INFLUX_TOKEN=${INFLUX_TOKEN}
      - INFLUX_ORG=${INFLUX_ORG}
      - INFLUX_BUCKET=Sentry
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=${NEO4J_USER}
      - NEO4J_PASS=${NEO4J_PASS}


  neo4j_sync:
    build: ./neo4j_sync
    ports:
      - "8003:8003"
    depends_on:
      - influxdb
      - neo4j
    environment:
      - INFLUX_URL=http://influxdb:8086
      - INFLUX_TOKEN=${INFLUX_TOKEN}
      - INFLUX_ORG=${INFLUX_ORG}
      - NEO4J_URL=bolt://neo4j:7687
      - NEO4J_AUTH=${NEO4J_AUTH}

  model_training:
    build: ./model_training
    ports:
      - "8005:8005"
    depends_on:
      - influxdb
      # - local_news_collector  # JSON store available locally
    environment:
      - INFLUX_URL=http://influxdb:8086
      - INFLUX_TOKEN=${INFLUX_TOKEN}
      - NEWS_JSON_PATH=/data/news
    command: python live_train.py

  inference_service:
    build: ./inference_service
    depends_on:
      - model_training
    ports:
      - '5000:5000'
    environment:
      - MODEL_PATH=/models/latest
    command: python serve.py

  trade_agent:
    build: ./trade_agent
    depends_on:
      - inference_service
    environment:
      - BROKER_API_KEY=${BINANCE_API_KEY}
      - BROKER_SECRET=${BINANCE_API_SECRET}
      - INFERENCE_URL=http://inference_service:5000
      - BINANCE_BASE_URL=https://testnet.binance.vision  # spot testnet
      - BINANCE_FUTURES_URL=https://testnet.binancefuture.com  # futures testnet
      - USE_TESTNET=true
      - TRADING_MODE=spot  # or 'futures'
    command: python executor.py

  backup_service:
    build: ./backup_service
    depends_on:
      - influxdb
      - neo4j
    volumes:
      - influxdb_backup:/backups/influxdb
      - neo4j_data:/backups/neo4j
    environment:
      - BACKUP_SCHEDULE=0 */6 * * *

volumes:
  influxdb_data:
  influxdb_backup:
  neo4j_data:
  neo4j_import: